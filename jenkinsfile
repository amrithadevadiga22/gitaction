pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="<REPLACE WITH ACCOUNT ID>"
        AWS_DEFAULT_REGION="<REPLACE WITH REGION>"
	CLUSTER_NAME="<REPLACE WITH CLUSTER NAME>"
	SERVICE_NAME="<REPLACE WITH SERVICE NAME>"
	TASK_DEFINITION_NAME="<REPLACE WITH TASK DEFINITION NAME>"
	DESIRED_COUNT="1"
        IMAGE_REPO_NAME="<REPLACE WITH ECR REPO NAME>"
        //Do not edit the variable IMAGE_TAG. It uses the Jenkins job build ID as a tag for the new image.
        IMAGE_TAG="${env.BUILD_ID}"
        //Do not edit REPOSITORY_URI.
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
	    registryCredential = "<REPLACE WITH NAME OF AWS CREDENTIAL>"
	    JOB_NAME = "<REPLACE WITH JOB NAME>"
	    TEST_CONTAINER_NAME = "${JOB_NAME}-test-server"
    
}
   
    stages {

      stage('Checkout') {
            steps {
                checkout scm
            }
        }

    // Building Docker image
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
     }


    // Uploading Docker image into AWS ECR
    stage('Releasing') {
     steps{  
         script {
			docker.withRegistry("https://" + REPOSITORY_URI, "ecr:${AWS_DEFAULT_REGION}:" + registryCredential) {
                    	dockerImage.push()
            }
         }
       }
     }

    //Create ECS infra via terraform and do deployment of application
   stage('Terraform Init') {
            steps {
                sh 'cd terraform && terraform init'
            }
        }
        stage('Terraform Apply') {
            steps {
                sh 'cd terraform && terraform apply -auto-approve'
            }
        }
 }
